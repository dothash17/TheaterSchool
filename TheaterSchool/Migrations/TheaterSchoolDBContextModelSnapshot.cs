// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheaterSchool.Models.Data;

#nullable disable

namespace TheaterSchool.Migrations
{
    [DbContext(typeof(TheaterSchoolDBContext))]
    partial class TheaterSchoolDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheaterSchool.Models.Performance", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PerformanceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Requisite")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("PerformanceID");

                    b.HasIndex(new[] { "PerformanceID" }, "IX_PerformanceID");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("TheaterSchool.Models.PhysicalPersons", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex(new[] { "ID" }, "IX_PhysicalPersonID");

                    b.ToTable("PhysicalPersons");
                });

            modelBuilder.Entity("TheaterSchool.Models.Student", b =>
                {
                    b.Property<int>("PhysicalPersonID")
                        .HasColumnType("int");

                    b.Property<int>("Course")
                        .HasColumnType("int");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PhysicalPersonID");

                    b.HasIndex(new[] { "PhysicalPersonID" }, "IX_Student_PhysicalPersonID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("TheaterSchool.Models.StudentPerformance", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "PerformanceID");

                    b.HasIndex(new[] { "PerformanceID" }, "IX_StudentPerformance_PerformanceID");

                    b.ToTable("StudentPerformance");
                });

            modelBuilder.Entity("TheaterSchool.Models.StudentSubject", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "SubjectID");

                    b.HasIndex(new[] { "SubjectID" }, "IX_StudentSubject_SubjectID");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("TheaterSchool.Models.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"));

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubjectID");

                    b.HasIndex(new[] { "SubjectID" }, "IX_SubjectID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("TheaterSchool.Models.SubjectTimetable", b =>
                {
                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int>("TimetableID")
                        .HasColumnType("int");

                    b.HasKey("SubjectID", "TimetableID");

                    b.HasIndex(new[] { "TimetableID" }, "IX_SubjectTimetable_TimetableID");

                    b.ToTable("SubjectTimetable");
                });

            modelBuilder.Entity("TheaterSchool.Models.Teacher", b =>
                {
                    b.Property<int>("PhysicalPersonID")
                        .HasColumnType("int");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PhysicalPersonID");

                    b.HasIndex(new[] { "PhysicalPersonID" }, "IX_Teacher_PhysicalPersonID");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("TheaterSchool.Models.TeacherPerformance", b =>
                {
                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceID")
                        .HasColumnType("int");

                    b.HasKey("TeacherID", "PerformanceID");

                    b.HasIndex(new[] { "PerformanceID" }, "IX_TeacherPerformance_PerformanceID");

                    b.ToTable("TeacherPerformance");
                });

            modelBuilder.Entity("TheaterSchool.Models.TeacherSubject", b =>
                {
                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("TeacherID", "SubjectID");

                    b.HasIndex(new[] { "SubjectID" }, "IX_TeacherSubject_SubjectID");

                    b.ToTable("TeacherSubject");
                });

            modelBuilder.Entity("TheaterSchool.Models.Timetable", b =>
                {
                    b.Property<int>("TimetableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimetableID"));

                    b.Property<int>("ClassRoom")
                        .HasColumnType("int");

                    b.Property<string>("DayOfTheWeek")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("PeriodNumber")
                        .HasColumnType("int");

                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.HasKey("TimetableID");

                    b.HasIndex("TeacherID");

                    b.HasIndex(new[] { "TimetableID" }, "IX_TimetableID");

                    b.ToTable("Timetable");
                });

            modelBuilder.Entity("TheaterSchool.Models.Student", b =>
                {
                    b.HasOne("TheaterSchool.Models.PhysicalPersons", "PhysicalPerson")
                        .WithOne("Student")
                        .HasForeignKey("TheaterSchool.Models.Student", "PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PhysicalPerson_Student");

                    b.Navigation("PhysicalPerson");
                });

            modelBuilder.Entity("TheaterSchool.Models.StudentPerformance", b =>
                {
                    b.HasOne("TheaterSchool.Models.Performance", "Performance")
                        .WithMany("StudentPerformance")
                        .HasForeignKey("PerformanceID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentPerformance_Performance");

                    b.HasOne("TheaterSchool.Models.Student", "Student")
                        .WithMany("StudentPerformance")
                        .HasForeignKey("StudentID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentPerformance_Student");

                    b.Navigation("Performance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TheaterSchool.Models.StudentSubject", b =>
                {
                    b.HasOne("TheaterSchool.Models.Student", "Student")
                        .WithMany("StudentSubject")
                        .HasForeignKey("StudentID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSubject_Student");

                    b.HasOne("TheaterSchool.Models.Subject", "Subject")
                        .WithMany("StudentSubject")
                        .HasForeignKey("SubjectID")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSubject_Subject");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("TheaterSchool.Models.SubjectTimetable", b =>
                {
                    b.HasOne("TheaterSchool.Models.Subject", "Subject")
                        .WithMany("SubjectTimetable")
                        .HasForeignKey("SubjectID")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectTimetable_Subject");

                    b.HasOne("TheaterSchool.Models.Timetable", "Timetable")
                        .WithMany("SubjectTimetable")
                        .HasForeignKey("TimetableID")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectTimetable_Timetable");

                    b.Navigation("Subject");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("TheaterSchool.Models.Teacher", b =>
                {
                    b.HasOne("TheaterSchool.Models.PhysicalPersons", "PhysicalPerson")
                        .WithOne("Teacher")
                        .HasForeignKey("TheaterSchool.Models.Teacher", "PhysicalPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PhysicalPerson_Teacher");

                    b.Navigation("PhysicalPerson");
                });

            modelBuilder.Entity("TheaterSchool.Models.TeacherPerformance", b =>
                {
                    b.HasOne("TheaterSchool.Models.Performance", "Performance")
                        .WithMany("TeacherPerformance")
                        .HasForeignKey("PerformanceID")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPerformance_Performance");

                    b.HasOne("TheaterSchool.Models.Teacher", "Teacher")
                        .WithMany("TeacherPerformance")
                        .HasForeignKey("TeacherID")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherPerformance_Teacher");

                    b.Navigation("Performance");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TheaterSchool.Models.TeacherSubject", b =>
                {
                    b.HasOne("TheaterSchool.Models.Subject", "Subject")
                        .WithMany("TeacherSubject")
                        .HasForeignKey("SubjectID")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherSubject_Subject");

                    b.HasOne("TheaterSchool.Models.Teacher", "Teacher")
                        .WithMany("TeacherSubject")
                        .HasForeignKey("TeacherID")
                        .IsRequired()
                        .HasConstraintName("FK_TeacherSubject_Teacher");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TheaterSchool.Models.Timetable", b =>
                {
                    b.HasOne("TheaterSchool.Models.Teacher", "Teacher")
                        .WithMany("Timetable")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Timetable_Teacher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TheaterSchool.Models.Performance", b =>
                {
                    b.Navigation("StudentPerformance");

                    b.Navigation("TeacherPerformance");
                });

            modelBuilder.Entity("TheaterSchool.Models.PhysicalPersons", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("Teacher")
                        .IsRequired();
                });

            modelBuilder.Entity("TheaterSchool.Models.Student", b =>
                {
                    b.Navigation("StudentPerformance");

                    b.Navigation("StudentSubject");
                });

            modelBuilder.Entity("TheaterSchool.Models.Subject", b =>
                {
                    b.Navigation("StudentSubject");

                    b.Navigation("SubjectTimetable");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("TheaterSchool.Models.Teacher", b =>
                {
                    b.Navigation("TeacherPerformance");

                    b.Navigation("TeacherSubject");

                    b.Navigation("Timetable");
                });

            modelBuilder.Entity("TheaterSchool.Models.Timetable", b =>
                {
                    b.Navigation("SubjectTimetable");
                });
#pragma warning restore 612, 618
        }
    }
}
